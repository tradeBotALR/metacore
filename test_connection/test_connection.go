package main

import (
	"context"
	"fmt"
	"log"

	"github.com/samar/sup_bot/metacore/configs"
	"github.com/samar/sup_bot/metacore/postgres"
)

func main() {
	fmt.Println("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := configs.DefaultConfig()
	fmt.Printf("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n")
	fmt.Printf("   Host: %s\n", cfg.DB.Host)
	fmt.Printf("   Port: %d\n", cfg.DB.Port)
	fmt.Printf("   User: %s\n", cfg.DB.User)
	fmt.Printf("   Database: %s\n", cfg.DB.DBName)
	fmt.Printf("   SSL Mode: %s\n", cfg.DB.SSLMode)

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î
	fmt.Println("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
	db, err := postgres.NewPostgresDB(cfg)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
		fmt.Println("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
		fmt.Println("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
		fmt.Println("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ configs/conf.go")
		fmt.Println("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'mexc_bot_db' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		fmt.Println("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'postgres'")
		return
	}
	defer db.Close()

	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º ping
	fmt.Println("\nüèì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ping...")
	ctx := context.Background()
	err = db.Ping(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ ping: %v", err)
	} else {
		fmt.Println("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω!")
	}

	fmt.Println("\nüéâ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–π:")
	fmt.Println("   go run cmd/main.go")
}
