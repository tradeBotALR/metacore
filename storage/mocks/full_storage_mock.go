// Code generated by MockGen. DO NOT EDIT.
// Source: metacore/storage (interfaces: FullStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "metacore/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
)

// MockFullStorage is a mock of FullStorage interface.
type MockFullStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFullStorageMockRecorder
}

// MockFullStorageMockRecorder is the mock recorder for MockFullStorage.
type MockFullStorageMockRecorder struct {
	mock *MockFullStorage
}

// NewMockFullStorage creates a new mock instance.
func NewMockFullStorage(ctrl *gomock.Controller) *MockFullStorage {
	mock := &MockFullStorage{ctrl: ctrl}
	mock.recorder = &MockFullStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFullStorage) EXPECT() *MockFullStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFullStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockFullStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFullStorage)(nil).Close))
}

// CreateOrder mocks base method.
func (m *MockFullStorage) CreateOrder(arg0 context.Context, arg1 *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockFullStorageMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockFullStorage)(nil).CreateOrder), arg0, arg1)
}

// DeleteOrderByID mocks base method.
func (m *MockFullStorage) DeleteOrderByID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderByID indicates an expected call of DeleteOrderByID.
func (mr *MockFullStorageMockRecorder) DeleteOrderByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderByID", reflect.TypeOf((*MockFullStorage)(nil).DeleteOrderByID), arg0, arg1)
}

// GetOrderByID mocks base method.
func (m *MockFullStorage) GetOrderByID(arg0 context.Context, arg1 string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockFullStorageMockRecorder) GetOrderByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockFullStorage)(nil).GetOrderByID), arg0, arg1)
}

// Pool mocks base method.
func (m *MockFullStorage) Pool() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockFullStorageMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockFullStorage)(nil).Pool))
}

// UpdateOrderStatus mocks base method.
func (m *MockFullStorage) UpdateOrderStatus(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockFullStorageMockRecorder) UpdateOrderStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockFullStorage)(nil).UpdateOrderStatus), arg0, arg1, arg2)
}
