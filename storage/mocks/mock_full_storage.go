// Code generated by MockGen. DO NOT EDIT.
// Source: ../full_storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"metacore/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockFullStorage is a mock of FullStorage interface.
type MockFullStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFullStorageMockRecorder
}

// MockFullStorageMockRecorder is the mock recorder for MockFullStorage.
type MockFullStorageMockRecorder struct {
	mock *MockFullStorage
}

// NewMockFullStorage creates a new mock instance.
func NewMockFullStorage(ctrl *gomock.Controller) *MockFullStorage {
	mock := &MockFullStorage{ctrl: ctrl}
	mock.recorder = &MockFullStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFullStorage) EXPECT() *MockFullStorageMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockFullStorage) CreateOrder(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockFullStorageMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockFullStorage)(nil).CreateOrder), ctx, order)
}

// DeleteOrderByID mocks base method.
func (m *MockFullStorage) DeleteOrderByID(ctx context.Context, mexcOrderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderByID", ctx, mexcOrderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderByID indicates an expected call of DeleteOrderByID.
func (mr *MockFullStorageMockRecorder) DeleteOrderByID(ctx, mexcOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderByID", reflect.TypeOf((*MockFullStorage)(nil).DeleteOrderByID), ctx, mexcOrderID)
}

// UpdateOrderStatus mocks base method.
func (m *MockFullStorage) UpdateOrderStatus(ctx context.Context, mexcOrderID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, mexcOrderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockFullStorageMockRecorder) UpdateOrderStatus(ctx, mexcOrderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockFullStorage)(nil).UpdateOrderStatus), ctx, mexcOrderID, status)
}

// GetOrderByID mocks base method.
func (m *MockFullStorage) GetOrderByID(ctx context.Context, mexcOrderID string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, mexcOrderID)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockFullStorageMockRecorder) GetOrderByID(ctx, mexcOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockFullStorage)(nil).GetOrderByID), ctx, mexcOrderID)
}

// CreateUser mocks base method.
func (m *MockFullStorage) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockFullStorageMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockFullStorage)(nil).CreateUser), ctx, user)
}

// GetUserByID mocks base method.
func (m *MockFullStorage) GetUserByID(ctx context.Context, id uint64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockFullStorageMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockFullStorage)(nil).GetUserByID), ctx, id)
}

// GetUserByMexcUID mocks base method.
func (m *MockFullStorage) GetUserByMexcUID(ctx context.Context, mexcUID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByMexcUID", ctx, mexcUID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByMexcUID indicates an expected call of GetUserByMexcUID.
func (mr *MockFullStorageMockRecorder) GetUserByMexcUID(ctx, mexcUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByMexcUID", reflect.TypeOf((*MockFullStorage)(nil).GetUserByMexcUID), ctx, mexcUID)
}

// UpdateUser mocks base method.
func (m *MockFullStorage) UpdateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockFullStorageMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockFullStorage)(nil).UpdateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockFullStorage) DeleteUser(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockFullStorageMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockFullStorage)(nil).DeleteUser), ctx, id)
}

// CreateTrade mocks base method.
func (m *MockFullStorage) CreateTrade(ctx context.Context, trade *domain.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrade", ctx, trade)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrade indicates an expected call of CreateTrade.
func (mr *MockFullStorageMockRecorder) CreateTrade(ctx, trade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrade", reflect.TypeOf((*MockFullStorage)(nil).CreateTrade), ctx, trade)
}

// GetTradeByID mocks base method.
func (m *MockFullStorage) GetTradeByID(ctx context.Context, mexcTradeID string) (*domain.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeByID", ctx, mexcTradeID)
	ret0, _ := ret[0].(*domain.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeByID indicates an expected call of GetTradeByID.
func (mr *MockFullStorageMockRecorder) GetTradeByID(ctx, mexcTradeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeByID", reflect.TypeOf((*MockFullStorage)(nil).GetTradeByID), ctx, mexcTradeID)
}

// UpdateBalance mocks base method.
func (m *MockFullStorage) UpdateBalance(ctx context.Context, balance *domain.UserBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockFullStorageMockRecorder) UpdateBalance(ctx, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockFullStorage)(nil).UpdateBalance), ctx, balance)
}

// GetBalance mocks base method.
func (m *MockFullStorage) GetBalance(ctx context.Context, userID uint64, asset string) (*domain.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID, asset)
	ret0, _ := ret[0].(*domain.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockFullStorageMockRecorder) GetBalance(ctx, userID, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockFullStorage)(nil).GetBalance), ctx, userID, asset)
}
