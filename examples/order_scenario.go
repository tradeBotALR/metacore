package examples

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/shopspring/decimal"

	"github.com/samar/sup_bot/metacore/domain"
	"github.com/samar/sup_bot/metacore/postgres"
)

// RunOrderScenario –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π:
// 1) –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// 2) –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
// 3) –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
// 4) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ (FILLED)
// 5) –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ –æ—Ä–¥–µ—Ä—É
// 6) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// 7) –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
func RunOrderScenario(ctx context.Context, db *postgres.DB) error {
	log.Println("\nüö¶ –ó–∞–ø—É—Å–∫ order-—Å—Ü–µ–Ω–∞—Ä–∏—è...")

	// –®–∞–≥ 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := &domain.User{
		TelegramID:    time.Now().Unix(),
		MexcUID:       fmt.Sprintf("demo_uid_%d", time.Now().UnixNano()),
		Username:      "scenario_user",
		Email:         "scenario_user@example.com",
		MexcAPIKey:    "api_key_placeholder",
		MexcSecretKey: "secret_key_placeholder",
		KYCStatus:     1,
		CanTrade:      true,
		CanWithdraw:   true,
		CanDeposit:    true,
		AccountType:   "spot",
		Permissions:   `{"perms":["trade"]}`,
		IsActive:      true,
	}
	if err := db.CreateUser(ctx, user); err != nil {
		return fmt.Errorf("create user: %w", err)
	}
	log.Printf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: id=%d, username=%s", user.ID, user.Username)

	// –®–∞–≥ 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
	mexcOrderID := fmt.Sprintf("order_%d", time.Now().UnixNano())
	order := &domain.Order{
		InternalID:          time.Now().UnixNano(),
		UserID:              user.ID,
		MexcOrderID:         mexcOrderID,
		Symbol:              "BTCUSDT",
		Side:                "BUY",
		Type:                "LIMIT",
		Status:              "NEW",
		Price:               decimal.NewFromFloat(50000.00),
		Quantity:            decimal.NewFromFloat(0.002),
		QuoteOrderQty:       decimal.NewFromFloat(100.00),
		ExecutedQuantity:    decimal.Zero,
		CummulativeQuoteQty: decimal.Zero,
		ClientOrderID:       fmt.Sprintf("cli_%d", time.Now().UnixNano()),
		TransactTime:        time.Now(),
	}
	if err := db.CreateOrder(ctx, order); err != nil {
		return fmt.Errorf("create order: %w", err)
	}
	log.Printf("üìà –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: mexc_order_id=%s, symbol=%s, side=%s", order.MexcOrderID, order.Symbol, order.Side)

	// –®–∞–≥ 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ mexc_order_id
	gotOrder, err := db.GetOrderByID(ctx, mexcOrderID)
	if err != nil {
		return fmt.Errorf("get order: %w", err)
	}
	log.Printf("üîé –û—Ä–¥–µ—Ä –Ω–∞–π–¥–µ–Ω: %s %s %s qty=%s", gotOrder.Symbol, gotOrder.Side, gotOrder.Status, gotOrder.Quantity.String())

	// –®–∞–≥ 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ -> FILLED
	if err := db.UpdateOrderStatus(ctx, mexcOrderID, "FILLED"); err != nil {
		return fmt.Errorf("update order status: %w", err)
	}
	log.Println("üîÑ –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ FILLED")

	// –®–∞–≥ 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ –æ—Ä–¥–µ—Ä—É
	trade := &domain.Trade{
		UserID:          user.ID,
		MexcTradeID:     fmt.Sprintf("trade_%d", time.Now().UnixNano()),
		OrderID:         mexcOrderID,
		Symbol:          "BTCUSDT",
		Price:           decimal.NewFromFloat(50000.00),
		Quantity:        decimal.NewFromFloat(0.002),
		QuoteQuantity:   decimal.NewFromFloat(100.00),
		Commission:      decimal.NewFromFloat(0.01),
		CommissionAsset: "USDT",
		TradeTime:       time.Now(),
		IsBuyer:         true,
		IsMaker:         false,
	}
	if err := db.CreateTrade(ctx, trade); err != nil {
		return fmt.Errorf("create trade: %w", err)
	}
	log.Printf("ü§ù –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: mexc_trade_id=%s qty=%s", trade.MexcTradeID, trade.Quantity.String())

	// –®–∞–≥ 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä: —Å–ø–∏—Å–∞–ª–∏ USDT, –∑–∞—á–∏—Å–ª–∏–ª–∏ BTC)
	balances := []*domain.UserBalance{
		{UserID: user.ID, Asset: "USDT", Free: decimal.NewFromFloat(900.00), Locked: decimal.Zero},
		{UserID: user.ID, Asset: "BTC", Free: decimal.NewFromFloat(0.002), Locked: decimal.Zero},
	}
	if err := db.UpdateUserBalances(ctx, user.ID, balances); err != nil {
		return fmt.Errorf("update user balances: %w", err)
	}
	log.Println("üí∞ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

	// –®–∞–≥ 7. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ)
	if err := db.DeleteOrderByID(ctx, mexcOrderID); err != nil {
		return fmt.Errorf("delete order: %w", err)
	}
	log.Println("üóëÔ∏è  –û—Ä–¥–µ—Ä —É–¥–∞–ª–µ–Ω (–∑–∞–≤–µ—Ä—à–µ–Ω)")

	log.Println("‚úÖ Order-—Å—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
	return nil
}
