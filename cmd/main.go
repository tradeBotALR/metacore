package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/samar/sup_bot/metacore/configs"
	"github.com/samar/sup_bot/metacore/domain"
	"github.com/samar/sup_bot/metacore/postgres"

	"github.com/shopspring/decimal"
)

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ Metacore –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è...")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := configs.DefaultConfig()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
	db, err := postgres.NewPostgresDB(cfg)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	ctx := context.Background()

	// –î–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–π: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ä–¥–µ—Ä–∞ –∏ –±–∞–ª–∞–Ω—Å–∞
	runDemoScenario(ctx, db)
}

func runDemoScenario(ctx context.Context, db *postgres.DB) {
	fmt.Println("\nüé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è...")

	// 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	fmt.Println("\nüë§ 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
	user := &domain.User{
		MexcUID:       "demo_user_123",
		Username:      "demo_trader",
		Email:         "demo@metacore.com",
		MexcAPIKey:    "demo_api_key_123",
		MexcSecretKey: "demo_secret_key_123",
		KYCStatus:     1, // verified
		CanTrade:      true,
		CanWithdraw:   true,
		CanDeposit:    true,
		AccountType:   "spot",
		Permissions:   `["trade", "withdraw", "deposit"]`,
		IsActive:      true,
	}

	err := db.CreateUser(ctx, user)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	} else {
		fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: %d\n", user.ID)
		fmt.Printf("   Username: %s, Email: %s\n", user.Username, user.Email)
		fmt.Printf("   KYC Status: %d, Can Trade: %t\n", user.KYCStatus, user.CanTrade)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
	fmt.Println("\nüîç 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID...")
	retrievedUser, err := db.GetUserByID(ctx, user.ID)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	} else {
		fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: %s (%s)\n", retrievedUser.Username, retrievedUser.Email)
	}

	// 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ MEXC UID
	fmt.Println("\nüîç 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ MEXC UID...")
	retrievedUserByUID, err := db.GetUserByMexcUID(ctx, user.MexcUID)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UID: %v", err)
	} else {
		fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ UID: %s\n", retrievedUserByUID.Username)
	}

	// 4. –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
	fmt.Println("\nüìä 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...")
	order := &domain.Order{
		InternalID:          12345,
		UserID:              user.ID,
		MexcOrderID:         "demo_order_123",
		Symbol:              "BTCUSDT",
		Side:                "BUY",
		Type:                "LIMIT",
		Status:              "NEW",
		Price:               decimal.NewFromFloat(50000.00),
		Quantity:            decimal.NewFromFloat(0.001),
		QuoteOrderQty:       decimal.NewFromFloat(50.00),
		ExecutedQuantity:    decimal.NewFromFloat(0.000),
		CummulativeQuoteQty: decimal.NewFromFloat(0.00),
		ClientOrderID:       "demo_client_123",
		TransactTime:        time.Now(),
	}

	err = db.CreateOrder(ctx, order)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: %v", err)
	} else {
		fmt.Printf("‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d\n", order.UserID)
		fmt.Printf("   Symbol: %s, Side: %s, Price: %s\n", order.Symbol, order.Side, order.Price.String())
		fmt.Printf("   Quantity: %s, Status: %s\n", order.Quantity.String(), order.Status)
	}

	// 5. –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –ø–æ ID
	fmt.Println("\nüîç 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ ID...")
	retrievedOrder, err := db.GetOrderByID(ctx, order.MexcOrderID)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: %v", err)
	} else {
		fmt.Printf("‚úÖ –û—Ä–¥–µ—Ä –Ω–∞–π–¥–µ–Ω: %s %s %s\n", retrievedOrder.Symbol, retrievedOrder.Side, retrievedOrder.Status)
		fmt.Printf("   Price: %s, Quantity: %s\n", retrievedOrder.Price.String(), retrievedOrder.Quantity.String())
	}

	// 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
	fmt.Println("\nüîÑ 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞...")
	err = db.UpdateOrderStatus(ctx, order.MexcOrderID, "FILLED")
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: %v", err)
	} else {
		fmt.Printf("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: FILLED\n")
	}

	// 7. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	fmt.Println("\n‚úèÔ∏è 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
	user.Username = "updated_demo_trader"
	user.Email = "updated_demo@metacore.com"
	user.KYCStatus = 2 // enhanced verification

	err = db.UpdateUser(ctx, user)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	} else {
		fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω\n")
		fmt.Printf("   –ù–æ–≤—ã–π username: %s, email: %s\n", user.Username, user.Email)
		fmt.Printf("   –ù–æ–≤—ã–π KYC Status: %d\n", user.KYCStatus)
	}

	// 8. –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	fmt.Println("\nüí∞ 8. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
	balance := &domain.UserBalance{
		UserID:    user.ID,
		Asset:     "USDT",
		Free:      decimal.NewFromFloat(1000.00),
		Locked:    decimal.NewFromFloat(50.00),
		UpdatedAt: time.Now(),
	}

	// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: BalanceStorage –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞
	fmt.Printf("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω (–º–µ—Ç–æ–¥ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)\n")
	fmt.Printf("   Asset: %s, Free: %s, Locked: %s\n", balance.Asset, balance.Free.String(), balance.Locked.String())

	// 9. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	fmt.Println("\nüìã 9. –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
	fmt.Printf("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: %d, Username: %s\n", user.ID, user.Username)
	fmt.Printf("   –û—Ä–¥–µ—Ä ID: %s, Symbol: %s, Status: %s\n", order.MexcOrderID, order.Symbol, order.Status)
	fmt.Printf("   –ë–∞–ª–∞–Ω—Å: %s %s (Free: %s, Locked: %s)\n", balance.Free.Add(balance.Locked).String(), balance.Asset, balance.Free.String(), balance.Locked.String())

	fmt.Println("\nüéâ –î–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("   –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
	fmt.Println("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	fmt.Println("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	fmt.Println("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
	fmt.Println("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
	fmt.Println("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞")
	fmt.Println("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	fmt.Println("   ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞")
}
